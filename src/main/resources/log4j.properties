# For the general syntax of property based configuration files see the
# documentation of org.apache.log4j.PropertyConfigurator.
# http://logging.apache.org/log4j/docs/api/org/apache/log4j/PropertyConfigurator.html
# Log4J Short Manual: http://logging.apache.org/log4j/docs/manual.html

###############################################################################

# Log4J Initialization

# Set up a simple configuration that logs on the console (ConsoleAppender):
# The output will be formatted using a PatternLayout set to the pattern PatternLayout.TTCC_CONVERSION_PATTERN.
#    org.apache.log4j.BasicConfigurator.configure();
#
# Read property configuration file:
#    org.apache.log4j.PropertyConfigurator.configure();
#
# Read XML configuration file:
#    org.apache.log4j.xml.DOMConfigurator.configure();
#
# The PropertyConfigurator does not handle the advanced configuration features
# supported by the DOMConfigurator such as support for Filters, custom
# ErrorHandlers, nested appenders such as the AsyncAppender, etc.

###############################################################################

# Variable substitution

# All option values admit variable substitution.
# Syntax: ${someKey}
# The value of the key is first searched in the system properties, and if not
# found there, it is then searched in the configuration file being parsed.
# Example: ${java.home} -> /home/myLoginName

###############################################################################

#    log4j.debug=true

# Enable log4j internal logging. Useful to see how log4j is reading configuration files.

###############################################################################

#    log4j.threshold=[level]

# The repository-wide threshold filters logging requests by level regardless of logger.
# For all categories, do not log messages with priority lower than [level].
#
# The level value can consist of the string values OFF, FATAL, ERROR, WARN,
# INFO, DEBUG, ALL or a custom level value (in the form level#classname).
# Defaults to the lowest possible value, namely the level ALL.

###############################################################################

# ObjectRenderers

# Customize the way message objects of a given type are converted to String
# before being logged.
#
#    log4j.renderer.fully.qualified.name.of.rendered.class=fully.qualified.name.of.rendering.class

###############################################################################

# Additivity

# By default, Appenders are additive (cumulative) by default.
# To change the default additivity for logger foo.bar:
#
#    log4j.additivity.foo.bar=false

###############################################################################

# Appender configuration

# Appender configuration syntax is:

#    # For appender named appenderName, set its class.
#    # Note: The appender name can contain dots.
#    log4j.appender.appenderName=fully.qualified.name.of.appender.class
#
#    # Set appender specific options.
#    log4j.appender.appenderName.option1=value1
#    ...
#    log4j.appender.appenderName.optionN=valueN
#    
#
# For each named appender you can configure its Layout. The syntax for configuring an appender's layout is:
#
#    log4j.appender.appenderName.layout=fully.qualified.name.of.layout.class
#    log4j.appender.appenderName.layout.option1=value1
#    ....
#    log4j.appender.appenderName.layout.optionN=valueN
#
# For each named appender included in Log4J you can configure its threshold:
#    log4j.appender.appenderName.threshold=[level]

###############################################################################

# Configuring loggers

# The syntax for configuring the root logger is:
#    log4j.rootLogger=[level], appenderName, appenderName, ...

# For non-root categories the syntax is almost the same:
#    log4j.logger.logger_name=[level|INHERITED|NULL], appenderName, appenderName, ...
# NULL is a synonym for INHERITED.

###############################################################################

# Logging levels: ALL, OFF, TRACE < DEBUG < INFO < WARN < ERROR < FATAL
# A custom level value can be specified in the form level#classname.

###############################################################################

# PatternLayout
# see http://logging.apache.org/log4j/docs/api/org/apache/log4j/EnhancedPatternLayout.html

# PatternLayout.DEFAULT_CONVERSION_PATTERN = %m%n
# PatternLayout.TTCC_CONVERSION_PATTERN = %r [%t] %p %c %x - %m%n
# %-4r [%t] %-5p %c %x - %m%n

# Cheat Sheet:
! c	category of the logging event
! C	fully qualified class name of the caller; SLOW!
! d	date of the logging event (%d{ISO8601} if not specified); use %d{ABSOLUTE} for %d{HH:mm:ss,SSS}
! F	file name where the logging request was issued; SLOW!
! l	location information of the caller; SLOW!
! L	line number from where the logging request was issued; SLOW!
! m	application supplied message associated with the logging event
! M	method name where the logging request was issued; SLOW!
! n	platform dependent line separator character(s)
! p	priority of the logging event
! r	number of milliseconds elapsed since ~the start of the application
! t	name of the thread
! x	NDC (nested diagnostic context) associated with the thread
! X	MDC (mapped diagnostic context) associated with the thread; e.g. %X{clientNumber}
! properties [Enhanced] Properties associated with the logging event; e.g. %properties{key}
! throwable  [Enhanced] Throwable trace that has been bound to the LoggingEvent. Output n lines of stack trace if a positive integer or omit the last -n lines if a negative integer; %throwable{short} == %throwable{1}; throwable{none} == throwable{0}
! %	The sequence %% outputs a single percent sign

###############################################################################

# Set root logger level to DEBUG and its appenders.
## TODO: remove CONSOLE for Production
!log4j.rootLogger=INFO, MESSADMIN
log4j.rootLogger=INFO, CONSOLE

# CONSOLE is set to be a ConsoleAppender, using PatternLayout.
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.layout=org.apache.log4j.EnhancedPatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern=%d{ABSOLUTE} [%t] %-5p %c %x - %m%n
log4j.appender.CONSOLE.Threshold=ALL

# MessAdmin
!log4j.appender.MESSADMIN=clime.messadmin.providers.log4j.Log4JAppender
!log4j.appender.MESSADMIN.layout=org.apache.log4j.EnhancedPatternLayout
!log4j.appender.MESSADMIN.layout.ConversionPattern=%d{ISO8601} [%-5p] %c %x - %m%n
!log4j.appender.MESSADMIN.Threshold=ALL

# RF is a RollingFile
!log4j.appender.RF=org.apache.log4j.DailyRollingFileAppender
log4j.appender.RF=org.apache.log4j.rolling.RollingFileAppender
log4j.appender.RF.File=${catalina.base}/logs/MessAdminUpdateServer.log
log4j.appender.RF.Encoding=UTF-8
!log4j.appender.RF.DatePattern='.'yyyy-MM
log4j.appender.RF.rollingPolicy=org.apache.log4j.rolling.TimeBasedRollingPolicy
log4j.appender.RF.rollingPolicy.FileNamePattern=${catalina.base}/logs/MessAdminUpdateServer.%d{yyyy-MM}.log.gz
log4j.appender.RF.layout=org.apache.log4j.EnhancedPatternLayout
log4j.appender.RF.layout.ConversionPattern=%d{ISO8601} %-5p %c %x - %m%n
log4j.appender.RF.Threshold=ALL

# Print only messages of level WARN or above in the package com.foo.
#log4j.logger.com.foo=WARN
log4j.logger.org.apache=WARN
!log4j.logger.fr.cedrik.messadmin.update.server=ALL, RF, MESSADMIN
log4j.logger.fr.cedrik.messadmin.update.server=ALL, RF
log4j.additivity.fr.cedrik.messadmin.update.server=false
